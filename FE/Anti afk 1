local VirtualInputManager = game:GetService("VirtualInputManager")
    local UserInputService = game:GetService("UserInputService")
    local Hooks = {}

    local function SortArguments(self, ...)
      return self, {...}
    end

    local Old
    Old = hookmetamethod(UserInputService.WindowFocused, "__index", function(...)
      local self, Index = ...
      local Response = Old(self, Index)

      if (tostring(self):find("WindowFocused") or tostring(self):find("WindowFocusReleased")) and not table.find(Hooks, Response) then
        table.insert(Hooks, Response)

        if Index:lower() == "wait" then
          local Old2
          Old2 = hookfunction(Response, function(...)
            local self1 = ...
            if self1 == self then
              self1 = Instance.new("BindableEvent").Event
            end
            return Old2(self1)
          end)
        elseif Index:lower() == "connect" then
          local Old2
          Old2 = hookfunction(Response, function(...)
            local self1, Function = ...
            if self1 == self then
              Function = function() return; end
            end
            return Old2(self1, Function)
          end)
        end
      end
      return Response
    end)

    for _, connection in ipairs(getconnections(UserInputService.WindowFocusReleased)) do
      connection:Disable()
    end

    for _, connection in ipairs(getconnections(UserInputService.WindowFocused)) do
      connection:Disable()
    end

    if not getgenv().WindowFocused then
      firesignal(UserInputService.WindowFocused)
      getgenv().WindowFocused = true
    end

    local function sendKeyEvent()
      while task.wait(math.random(15, 120)) do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Unknown, false, game)
      end
    end

    coroutine.wrap(sendKeyEvent)() -- Run sendKeyEvent in a separate thread
